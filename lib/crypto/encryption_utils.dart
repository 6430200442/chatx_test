// import 'dart:convert';
// import 'dart:typed_data';
// import 'package:cryptography/cryptography.dart';

// Future<List<int>> deriveSharedKey(
//     SimpleKeyPair clientKeyPair, String serverPublicKeyBase64) async {
  
//   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
//   if (clientKeyPair == null) {
//     throw ArgumentError('‚ùå Client key pair is null');
//   }
  
//   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
//   if (serverPublicKeyBase64.isEmpty) {
//     throw ArgumentError('‚ùå Server public key (base64) is empty');
//   }

//   // ‡πÅ‡∏õ‡∏•‡∏á server public key
//   final rawServerKey = base64Decode(serverPublicKeyBase64);
//   if (rawServerKey.isEmpty) {
//     throw ArgumentError('‚ùå Server public key bytes are empty after decode');
//   }

//   print('Decoded server key length: ${rawServerKey.length}');
//   print('Decoded server key bytes: $rawServerKey');

//   final algorithm = X25519();

//   // ‡πÅ‡∏õ‡∏•‡∏á server public key
//   final serverPublicKey = SimplePublicKey(
//     rawServerKey,
//     type: KeyPairType.x25519,
//   );

//   // ‡∏™‡∏£‡πâ‡∏≤‡∏á shared secret
//   final sharedSecret = await algorithm.sharedSecretKey(
//     keyPair: clientKeyPair,
//     remotePublicKey: serverPublicKey,
//   );

//   print('sharedSecret runtimeType: ${sharedSecret.runtimeType}');

//   // 1. ‡∏î‡∏∂‡∏á bytes ‡∏î‡∏¥‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å sharedSecret ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å X25519 ‡∏Å‡πà‡∏≠‡∏ô
//   final secretBytes = await sharedSecret.extractBytes();
//   print('sharedSecret bytes length: ${secretBytes.length}');
//   print('sharedSecret bytes: $secretBytes');

//   // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á SecretKey object ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å bytes ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö HKDF ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
//   final secretKeyForHkdf = SecretKey(secretBytes);

//   print('üü¢üü¢üü¢ USING NEW CODE! The secretKeyForHkdf object is ready. üü¢üü¢üü¢');

//   // ‡∏™‡∏£‡πâ‡∏≤‡∏á HKDF derived key 
//   final hkdf = Hkdf(
//     hmac: Hmac.sha256(),
//     outputLength: 32,
//   );

//   // final derivedKey = await hkdf.deriveKey(
//   //   // 3. ‡πÉ‡∏ä‡πâ SecretKey ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô
//   //   secretKey: secretKeyForHkdf, // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
//   //   info: utf8.encode('key-exchange'),
//   // );

//   // ‚úÖ ‡∏ó‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà: ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö 2 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô (Extract -> Expand)
//   // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: Extract a pseudorandom key (PRK) from the shared secret.
//   // ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ "salt" ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HKDF
//   final pseudoRandomKey = await hkdf.extract(
//     secretKey: secretKeyForHkdf,
//   );

//   // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: Expand the PRK to get the final output key.
//   final derivedKey = await hkdf.expand(
//     pseudoRandomKey: pseudoRandomKey,
//     info: utf8.encode('key-exchange'),
//   );

//   final derivedBytes = await derivedKey.extractBytes();
//   print('‚úÖ Derived key length: ${derivedBytes.length}');
//   print('‚úÖ Derived key bytes: $derivedBytes');

//   return derivedBytes;
// }

import 'dart:convert';
import 'dart:typed_data'; // ‡∏ï‡πâ‡∏≠‡∏á import ‡πÄ‡∏û‡∏¥‡πà‡∏°
import 'package:cryptography/cryptography.dart';

Future<List<int>> deriveSharedKey(
    SimpleKeyPair clientKeyPair, String serverPublicKeyBase64) async {
  // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏∏‡∏ç‡πÅ‡∏à (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---

  if (serverPublicKeyBase64.isEmpty) {
    throw ArgumentError('‚ùå Server public key (base64) is empty');
  }
  final rawServerKey = base64Decode(serverPublicKeyBase64);
  if (rawServerKey.isEmpty) {
    throw ArgumentError('‚ùå Server public key bytes are empty after decode');
  }

  final algorithm = X25519();
  final serverPublicKey = SimplePublicKey(
    rawServerKey,
    type: KeyPairType.x25519,
  );

  final sharedSecret = await algorithm.sharedSecretKey(
    keyPair: clientKeyPair,
    remotePublicKey: serverPublicKey,
  );

  // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á HKDF ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö v2.7.0 ---

  print('üü¢üü¢üü¢ Using Manual HKDF for cryptography v2.7.0 üü¢üü¢üü¢');

  final hmac = Hmac.sha256();

  // 1. HKDF-Extract: ‡∏™‡∏£‡πâ‡∏≤‡∏á Pseudorandom Key (PRK)
  // ‡πÉ‡∏ô v2.7.0 ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ sharedSecret ‡πÄ‡∏õ‡πá‡∏ô key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HMAC ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  // (‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏µ salt ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ salt ‡∏ã‡∏∂‡πà‡∏á‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
  final prkMac = await hmac.calculateMac(
    [], // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤)
    secretKey: sharedSecret,
  );
  final pseudoRandomKey = SecretKey(prkMac.bytes);

  // 2. HKDF-Expand: ‡∏™‡∏£‡πâ‡∏≤‡∏á Output Keying Material (OKM)
  // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ PRK ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HMAC ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
  final info = utf8.encode('key-exchange');
  final counter = [0x01]; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ HMAC = info + counter
  final dataToMac = Uint8List.fromList([...info, ...counter]);

  final okmMac = await hmac.calculateMac(
    dataToMac,
    secretKey: pseudoRandomKey,
  );

  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ derived key ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  final derivedBytes = okmMac.bytes;
  
  print('‚úÖ Derived key (manual) length: ${derivedBytes.length}');
  print('‚úÖ Derived key (manual) bytes: $derivedBytes');

  return derivedBytes;
}